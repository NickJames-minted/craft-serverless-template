GithubIAMUser:
  Type: "AWS::IAM::User"
  Properties:
    Policies:
      - PolicyName: "#{CodeBuildProjectName}-github-sns-role"
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action: "sns:Publish"
              Resource: Ref: GitgubEventSNSTopic
GithubIAMUserAccessKey:
  Type: "AWS::IAM::AccessKey"
  Properties:
    UserName: Ref: GithubIAMUser
##########################
# GithubWebhook(CustomResource)
##########################
GithubWebhookCustomResourceRole:
  Type: "AWS::IAM::Role"
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: "sts:AssumeRole"
    Policies:
      - PolicyName: "#{CodeBuildProjectName}-github-webhook-lambda-execution-role"
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "arn:aws:logs:*:*:*"
GithubWebhookCustomResource:
  Type: "AWS::Serverless::Function"
  Properties:
    Handler: index.handler
    Role:
      Fn::GetAtt:
        - GithubWebhookCustomResourceRole
        - Arn
    CodeUri: ./src/functions/github-webhook-resource
    Runtime: nodejs6.10
    Timeout: 30
    Environment:
      Variables:
        GITHUB_TOKEN: Ref: GithubPersonalAccessToken
        GITHUB_REPOSITORY_URL: Ref: GithubRepositoryUrl
        GITHUB_TARGET_RESOURCE: Ref: GithubTargetResource
        SNS_ACCESS_KEY_ID: Ref: GithubIAMUserAccessKey
        SNS_SECRET_ACCESS_KEY:
          Fn::GetAtt
            - GithubIAMUserAccessKey
            - SecretAccessKey
        SNS_REGION: Ref: "AWS::Region"
        SNS_TOPIC: Ref: GithubEventSNSTopic
GithubWebhook:
  Type: "Custom::GithubWebhook"
  Properties:
    ServiceToken:
      Fn::GetAtt
        - GithubWebhookCustomResource
        - Arn
    # Define all variables to re-create Github's webhook configuration via `make deploy` when parameters have changed
    GITHUB_TOKEN: Ref: GithubPersonalAccessToken
    GITHUB_REPOSITORY_URL: Ref: GithubRepositoryUrl
    GITHUB_TARGET_RESOURCE: Ref: GithubTargetResource
    SNS_ACCESS_KEY_ID: Ref: GithubIAMUserAccessKey
    SNS_SECRET_ACCESS_KEY:
      Fn::GetAtt
        - GithubIAMUserAccessKey
        - SecretAccessKey
    SNS_REGION: Ref: "AWS::Region"
    SNS_TOPIC: Ref: GithubEventSNSTopic
  ##########################
  # Lambda (BuildStateNotifier)
  ##########################
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "#{CodeBuildProjectName}-lambda-execution-role"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
  BuildStateNotifier:
    Type: "AWS::Serverless::Function"
    Properties:
      Role:
        Fn::GetAtt
          - LambdaExecutionRole
          - Arn
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./src/functions/build-state-notifier
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          CODEBUILD_PROJECT_REGION: !Ref CodeBuildRegion
          GITHUB_TOKEN: !Ref GitHubPersonalAccessToken
          GITHUB_REPOSITORY_URL: !Ref GitHubRepositoryUrl
      Events:
        CodeBuildStatusChange:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - "aws.codebuild"
              detail-type:
                - !Sub "CodeBuild Build State Change"
              detail:
                project-name:
                  - !Ref CodeBuildProjectName
  ##########################
  # Lambda (WebhookHandler)
  ##########################
  WebhookHandlerExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${CodeBuildProjectName}-webhook-handler-execution-role"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildProjectName}"
